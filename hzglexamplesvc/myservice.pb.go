// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: hzglexamplesvc/myservice.proto

package hzglexamplesvc

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RequestOfManyTypes_AnEnumDef int32

const (
	RequestOfManyTypes_FirstMustBeZero RequestOfManyTypes_AnEnumDef = 0
	RequestOfManyTypes_Second          RequestOfManyTypes_AnEnumDef = 222
	RequestOfManyTypes_Third           RequestOfManyTypes_AnEnumDef = 333
)

// Enum value maps for RequestOfManyTypes_AnEnumDef.
var (
	RequestOfManyTypes_AnEnumDef_name = map[int32]string{
		0:   "FirstMustBeZero",
		222: "Second",
		333: "Third",
	}
	RequestOfManyTypes_AnEnumDef_value = map[string]int32{
		"FirstMustBeZero": 0,
		"Second":          222,
		"Third":           333,
	}
)

func (x RequestOfManyTypes_AnEnumDef) Enum() *RequestOfManyTypes_AnEnumDef {
	p := new(RequestOfManyTypes_AnEnumDef)
	*p = x
	return p
}

func (x RequestOfManyTypes_AnEnumDef) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestOfManyTypes_AnEnumDef) Descriptor() protoreflect.EnumDescriptor {
	return file_hzglexamplesvc_myservice_proto_enumTypes[0].Descriptor()
}

func (RequestOfManyTypes_AnEnumDef) Type() protoreflect.EnumType {
	return &file_hzglexamplesvc_myservice_proto_enumTypes[0]
}

func (x RequestOfManyTypes_AnEnumDef) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestOfManyTypes_AnEnumDef.Descriptor instead.
func (RequestOfManyTypes_AnEnumDef) EnumDescriptor() ([]byte, []int) {
	return file_hzglexamplesvc_myservice_proto_rawDescGZIP(), []int{0, 0}
}

type ResponseOfManyTypes_AnEnumDef int32

const (
	ResponseOfManyTypes_FirstMustBeZero ResponseOfManyTypes_AnEnumDef = 0
	ResponseOfManyTypes_Second          ResponseOfManyTypes_AnEnumDef = 222
	ResponseOfManyTypes_Third           ResponseOfManyTypes_AnEnumDef = 333
)

// Enum value maps for ResponseOfManyTypes_AnEnumDef.
var (
	ResponseOfManyTypes_AnEnumDef_name = map[int32]string{
		0:   "FirstMustBeZero",
		222: "Second",
		333: "Third",
	}
	ResponseOfManyTypes_AnEnumDef_value = map[string]int32{
		"FirstMustBeZero": 0,
		"Second":          222,
		"Third":           333,
	}
)

func (x ResponseOfManyTypes_AnEnumDef) Enum() *ResponseOfManyTypes_AnEnumDef {
	p := new(ResponseOfManyTypes_AnEnumDef)
	*p = x
	return p
}

func (x ResponseOfManyTypes_AnEnumDef) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseOfManyTypes_AnEnumDef) Descriptor() protoreflect.EnumDescriptor {
	return file_hzglexamplesvc_myservice_proto_enumTypes[1].Descriptor()
}

func (ResponseOfManyTypes_AnEnumDef) Type() protoreflect.EnumType {
	return &file_hzglexamplesvc_myservice_proto_enumTypes[1]
}

func (x ResponseOfManyTypes_AnEnumDef) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseOfManyTypes_AnEnumDef.Descriptor instead.
func (ResponseOfManyTypes_AnEnumDef) EnumDescriptor() ([]byte, []int) {
	return file_hzglexamplesvc_myservice_proto_rawDescGZIP(), []int{1, 0}
}

type RequestOfManyTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AString string                       `protobuf:"bytes,1,opt,name=AString,proto3" json:"AString,omitempty"`
	AnInt   int32                        `protobuf:"varint,2,opt,name=AnInt,proto3" json:"AnInt,omitempty"`
	AFloat  float32                      `protobuf:"fixed32,3,opt,name=AFloat,proto3" json:"AFloat,omitempty"`
	ADouble float64                      `protobuf:"fixed64,4,opt,name=ADouble,proto3" json:"ADouble,omitempty"`
	ABool   bool                         `protobuf:"varint,5,opt,name=ABool,proto3" json:"ABool,omitempty"`
	ABlob   []byte                       `protobuf:"bytes,6,opt,name=ABlob,proto3" json:"ABlob,omitempty"`
	AnEnum  RequestOfManyTypes_AnEnumDef `protobuf:"varint,7,opt,name=AnEnum,proto3,enum=hzglexamplesvc.RequestOfManyTypes_AnEnumDef" json:"AnEnum,omitempty"`
	AnArray []int64                      `protobuf:"varint,8,rep,packed,name=AnArray,proto3" json:"AnArray,omitempty"`
	AMap    map[string]bool              `protobuf:"bytes,9,rep,name=AMap,proto3" json:"AMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *RequestOfManyTypes) Reset() {
	*x = RequestOfManyTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hzglexamplesvc_myservice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestOfManyTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestOfManyTypes) ProtoMessage() {}

func (x *RequestOfManyTypes) ProtoReflect() protoreflect.Message {
	mi := &file_hzglexamplesvc_myservice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestOfManyTypes.ProtoReflect.Descriptor instead.
func (*RequestOfManyTypes) Descriptor() ([]byte, []int) {
	return file_hzglexamplesvc_myservice_proto_rawDescGZIP(), []int{0}
}

func (x *RequestOfManyTypes) GetAString() string {
	if x != nil {
		return x.AString
	}
	return ""
}

func (x *RequestOfManyTypes) GetAnInt() int32 {
	if x != nil {
		return x.AnInt
	}
	return 0
}

func (x *RequestOfManyTypes) GetAFloat() float32 {
	if x != nil {
		return x.AFloat
	}
	return 0
}

func (x *RequestOfManyTypes) GetADouble() float64 {
	if x != nil {
		return x.ADouble
	}
	return 0
}

func (x *RequestOfManyTypes) GetABool() bool {
	if x != nil {
		return x.ABool
	}
	return false
}

func (x *RequestOfManyTypes) GetABlob() []byte {
	if x != nil {
		return x.ABlob
	}
	return nil
}

func (x *RequestOfManyTypes) GetAnEnum() RequestOfManyTypes_AnEnumDef {
	if x != nil {
		return x.AnEnum
	}
	return RequestOfManyTypes_FirstMustBeZero
}

func (x *RequestOfManyTypes) GetAnArray() []int64 {
	if x != nil {
		return x.AnArray
	}
	return nil
}

func (x *RequestOfManyTypes) GetAMap() map[string]bool {
	if x != nil {
		return x.AMap
	}
	return nil
}

type ResponseOfManyTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AString string                        `protobuf:"bytes,1,opt,name=AString,proto3" json:"AString,omitempty"`
	AnInt   int32                         `protobuf:"varint,2,opt,name=AnInt,proto3" json:"AnInt,omitempty"`
	AFloat  float32                       `protobuf:"fixed32,3,opt,name=AFloat,proto3" json:"AFloat,omitempty"`
	ADouble float64                       `protobuf:"fixed64,4,opt,name=ADouble,proto3" json:"ADouble,omitempty"`
	ABool   bool                          `protobuf:"varint,5,opt,name=ABool,proto3" json:"ABool,omitempty"`
	ABlob   []byte                        `protobuf:"bytes,6,opt,name=ABlob,proto3" json:"ABlob,omitempty"`
	AnEnum  ResponseOfManyTypes_AnEnumDef `protobuf:"varint,7,opt,name=AnEnum,proto3,enum=hzglexamplesvc.ResponseOfManyTypes_AnEnumDef" json:"AnEnum,omitempty"`
	AnArray []int64                       `protobuf:"varint,8,rep,packed,name=AnArray,proto3" json:"AnArray,omitempty"`
	AMap    map[string]bool               `protobuf:"bytes,9,rep,name=AMap,proto3" json:"AMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ResponseOfManyTypes) Reset() {
	*x = ResponseOfManyTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hzglexamplesvc_myservice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseOfManyTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseOfManyTypes) ProtoMessage() {}

func (x *ResponseOfManyTypes) ProtoReflect() protoreflect.Message {
	mi := &file_hzglexamplesvc_myservice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseOfManyTypes.ProtoReflect.Descriptor instead.
func (*ResponseOfManyTypes) Descriptor() ([]byte, []int) {
	return file_hzglexamplesvc_myservice_proto_rawDescGZIP(), []int{1}
}

func (x *ResponseOfManyTypes) GetAString() string {
	if x != nil {
		return x.AString
	}
	return ""
}

func (x *ResponseOfManyTypes) GetAnInt() int32 {
	if x != nil {
		return x.AnInt
	}
	return 0
}

func (x *ResponseOfManyTypes) GetAFloat() float32 {
	if x != nil {
		return x.AFloat
	}
	return 0
}

func (x *ResponseOfManyTypes) GetADouble() float64 {
	if x != nil {
		return x.ADouble
	}
	return 0
}

func (x *ResponseOfManyTypes) GetABool() bool {
	if x != nil {
		return x.ABool
	}
	return false
}

func (x *ResponseOfManyTypes) GetABlob() []byte {
	if x != nil {
		return x.ABlob
	}
	return nil
}

func (x *ResponseOfManyTypes) GetAnEnum() ResponseOfManyTypes_AnEnumDef {
	if x != nil {
		return x.AnEnum
	}
	return ResponseOfManyTypes_FirstMustBeZero
}

func (x *ResponseOfManyTypes) GetAnArray() []int64 {
	if x != nil {
		return x.AnArray
	}
	return nil
}

func (x *ResponseOfManyTypes) GetAMap() map[string]bool {
	if x != nil {
		return x.AMap
	}
	return nil
}

var File_hzglexamplesvc_myservice_proto protoreflect.FileDescriptor

var file_hzglexamplesvc_myservice_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x68, 0x7a, 0x67, 0x6c, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x76, 0x63,
	0x2f, 0x6d, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0e, 0x68, 0x7a, 0x67, 0x6c, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x76, 0x63,
	0x22, 0xb8, 0x03, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x4d, 0x61,
	0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x6e, 0x49, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x41, 0x6e, 0x49, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x41, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x41, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x41, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x42, 0x6f,
	0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x41, 0x42, 0x6f, 0x6f, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x41, 0x42, 0x6c, 0x6f, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x41, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x44, 0x0a, 0x06, 0x41, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x68, 0x7a, 0x67, 0x6c, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x76, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x66,
	0x4d, 0x61, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x45, 0x6e, 0x75, 0x6d,
	0x44, 0x65, 0x66, 0x52, 0x06, 0x41, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x41,
	0x6e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x41, 0x6e,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x40, 0x0a, 0x04, 0x41, 0x4d, 0x61, 0x70, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x7a, 0x67, 0x6c, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x76, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x4d, 0x61,
	0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x41, 0x4d, 0x61, 0x70, 0x1a, 0x37, 0x0a, 0x09, 0x41, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x39, 0x0a, 0x09, 0x41, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x44, 0x65, 0x66, 0x12, 0x13, 0x0a,
	0x0f, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4d, 0x75, 0x73, 0x74, 0x42, 0x65, 0x5a, 0x65, 0x72, 0x6f,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x06, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x10, 0xde, 0x01, 0x12,
	0x0a, 0x0a, 0x05, 0x54, 0x68, 0x69, 0x72, 0x64, 0x10, 0xcd, 0x02, 0x22, 0xbb, 0x03, 0x0a, 0x13,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x66, 0x4d, 0x61, 0x6e, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x41, 0x6e, 0x49, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x41, 0x6e,
	0x49, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x06, 0x41, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x41,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x41, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x42, 0x6f, 0x6f, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x41, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x41,
	0x42, 0x6c, 0x6f, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x41, 0x42, 0x6c, 0x6f,
	0x62, 0x12, 0x45, 0x0a, 0x06, 0x41, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2d, 0x2e, 0x68, 0x7a, 0x67, 0x6c, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x76, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x66, 0x4d, 0x61, 0x6e,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x44, 0x65, 0x66,
	0x52, 0x06, 0x41, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x6e, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x41, 0x6e, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x12, 0x41, 0x0a, 0x04, 0x41, 0x4d, 0x61, 0x70, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x68, 0x7a, 0x67, 0x6c, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x76,
	0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x66, 0x4d, 0x61, 0x6e, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x41, 0x4d, 0x61, 0x70, 0x1a, 0x37, 0x0a, 0x09, 0x41, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x39,
	0x0a, 0x09, 0x41, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x44, 0x65, 0x66, 0x12, 0x13, 0x0a, 0x0f, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x4d, 0x75, 0x73, 0x74, 0x42, 0x65, 0x5a, 0x65, 0x72, 0x6f, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x06, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x10, 0xde, 0x01, 0x12, 0x0a, 0x0a,
	0x05, 0x54, 0x68, 0x69, 0x72, 0x64, 0x10, 0xcd, 0x02, 0x32, 0xa9, 0x03, 0x0a, 0x13, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x5c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x2e, 0x68, 0x7a, 0x67, 0x6c, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x76, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f,
	0x66, 0x4d, 0x61, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x23, 0x2e, 0x68, 0x7a, 0x67,
	0x6c, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x76, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x66, 0x4d, 0x61, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x5e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x2e, 0x68, 0x7a, 0x67, 0x6c, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x76, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x4d,
	0x61, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x23, 0x2e, 0x68, 0x7a, 0x67, 0x6c, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x76, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4f, 0x66, 0x4d, 0x61, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x30, 0x01, 0x12,
	0x68, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x22,
	0x2e, 0x68, 0x7a, 0x67, 0x6c, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x76, 0x63, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x4d, 0x61, 0x6e, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x1a, 0x23, 0x2e, 0x68, 0x7a, 0x67, 0x6c, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x76, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x66, 0x4d, 0x61,
	0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x28, 0x01, 0x12, 0x6a, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x72,
	0x6f, 0x6d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x22, 0x2e, 0x68, 0x7a, 0x67, 0x6c, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x76, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4f, 0x66, 0x4d, 0x61, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x23, 0x2e, 0x68,
	0x7a, 0x67, 0x6c, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x76, 0x63, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x66, 0x4d, 0x61, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x28, 0x01, 0x30, 0x01, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x48, 0x6f, 0x75, 0x7a, 0x75, 0x6f, 0x47, 0x75, 0x6f, 0x2f, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x3b, 0x68, 0x7a, 0x67, 0x6c, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x76, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hzglexamplesvc_myservice_proto_rawDescOnce sync.Once
	file_hzglexamplesvc_myservice_proto_rawDescData = file_hzglexamplesvc_myservice_proto_rawDesc
)

func file_hzglexamplesvc_myservice_proto_rawDescGZIP() []byte {
	file_hzglexamplesvc_myservice_proto_rawDescOnce.Do(func() {
		file_hzglexamplesvc_myservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_hzglexamplesvc_myservice_proto_rawDescData)
	})
	return file_hzglexamplesvc_myservice_proto_rawDescData
}

var file_hzglexamplesvc_myservice_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_hzglexamplesvc_myservice_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_hzglexamplesvc_myservice_proto_goTypes = []interface{}{
	(RequestOfManyTypes_AnEnumDef)(0),  // 0: hzglexamplesvc.RequestOfManyTypes.AnEnumDef
	(ResponseOfManyTypes_AnEnumDef)(0), // 1: hzglexamplesvc.ResponseOfManyTypes.AnEnumDef
	(*RequestOfManyTypes)(nil),         // 2: hzglexamplesvc.RequestOfManyTypes
	(*ResponseOfManyTypes)(nil),        // 3: hzglexamplesvc.ResponseOfManyTypes
	nil,                                // 4: hzglexamplesvc.RequestOfManyTypes.AMapEntry
	nil,                                // 5: hzglexamplesvc.ResponseOfManyTypes.AMapEntry
}
var file_hzglexamplesvc_myservice_proto_depIdxs = []int32{
	0, // 0: hzglexamplesvc.RequestOfManyTypes.AnEnum:type_name -> hzglexamplesvc.RequestOfManyTypes.AnEnumDef
	4, // 1: hzglexamplesvc.RequestOfManyTypes.AMap:type_name -> hzglexamplesvc.RequestOfManyTypes.AMapEntry
	1, // 2: hzglexamplesvc.ResponseOfManyTypes.AnEnum:type_name -> hzglexamplesvc.ResponseOfManyTypes.AnEnumDef
	5, // 3: hzglexamplesvc.ResponseOfManyTypes.AMap:type_name -> hzglexamplesvc.ResponseOfManyTypes.AMapEntry
	2, // 4: hzglexamplesvc.DataTypeExperiments.GetSingleResponse:input_type -> hzglexamplesvc.RequestOfManyTypes
	2, // 5: hzglexamplesvc.DataTypeExperiments.GetStreamResponse:input_type -> hzglexamplesvc.RequestOfManyTypes
	2, // 6: hzglexamplesvc.DataTypeExperiments.GetSingleResponseFromStream:input_type -> hzglexamplesvc.RequestOfManyTypes
	2, // 7: hzglexamplesvc.DataTypeExperiments.GetStreamResponseFromStream:input_type -> hzglexamplesvc.RequestOfManyTypes
	3, // 8: hzglexamplesvc.DataTypeExperiments.GetSingleResponse:output_type -> hzglexamplesvc.ResponseOfManyTypes
	3, // 9: hzglexamplesvc.DataTypeExperiments.GetStreamResponse:output_type -> hzglexamplesvc.ResponseOfManyTypes
	3, // 10: hzglexamplesvc.DataTypeExperiments.GetSingleResponseFromStream:output_type -> hzglexamplesvc.ResponseOfManyTypes
	3, // 11: hzglexamplesvc.DataTypeExperiments.GetStreamResponseFromStream:output_type -> hzglexamplesvc.ResponseOfManyTypes
	8, // [8:12] is the sub-list for method output_type
	4, // [4:8] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_hzglexamplesvc_myservice_proto_init() }
func file_hzglexamplesvc_myservice_proto_init() {
	if File_hzglexamplesvc_myservice_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hzglexamplesvc_myservice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestOfManyTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hzglexamplesvc_myservice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseOfManyTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hzglexamplesvc_myservice_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_hzglexamplesvc_myservice_proto_goTypes,
		DependencyIndexes: file_hzglexamplesvc_myservice_proto_depIdxs,
		EnumInfos:         file_hzglexamplesvc_myservice_proto_enumTypes,
		MessageInfos:      file_hzglexamplesvc_myservice_proto_msgTypes,
	}.Build()
	File_hzglexamplesvc_myservice_proto = out.File
	file_hzglexamplesvc_myservice_proto_rawDesc = nil
	file_hzglexamplesvc_myservice_proto_goTypes = nil
	file_hzglexamplesvc_myservice_proto_depIdxs = nil
}
